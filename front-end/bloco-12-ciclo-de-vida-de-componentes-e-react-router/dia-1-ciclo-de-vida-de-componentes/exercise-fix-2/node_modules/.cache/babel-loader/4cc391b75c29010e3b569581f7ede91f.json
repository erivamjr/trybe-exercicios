{"ast":null,"code":"var _jsxFileName = \"/home/erivam/Documentos/Trybe/trybe-exercicios/front-end/bloco-12-ciclo-de-vida-de-componentes-e-react-router/dia-1-ciclo-de-vida-de-componentes/exercise-fix-2/src/components/PersonDetails.jsx\";\n// PersonDetails.js\nimport React, { Component } from 'react';\nimport Loading from './Loading';\nimport PersonCard from './PersonCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PersonDetails extends Component {\n  constructor() {\n    super(); // No construtor, criamos os nossos estados de Loding e Person, que vai receber a requisição para a api.\n    // Começamos com o Loading como true, pois queremos que ele exiba a nossa mensagem de \"carregando\" enquanto\n    // não renderizamos a primeira tela. Já o Person, setamos como um estado vázio, pois ele ira receber a nossa API.\n\n    this.state = {\n      loading: true,\n      person: []\n    };\n  } // Como estudamos, o componentDidMount vai disparar ações após o componenete ser inserido no DOM, por isso dizemos que é\n  // o ideal para realizar requisições e atribuimos ao nosso estado Person o 'data.results' \n  // que trás os nossos dados da API. Além disso, atribuimos como false o Loading, \n  // uma vez que quando a página é renderizada, não teremos mais a mensagem de \"carregando\".\n\n\n  componentDidMount() {\n    const url = 'https://api.randomuser.me/';\n    fetch(url).then(response => response.json()).then(data => {\n      // Note que, nesse ponto o nosso data retorna um Objeto e, se acessarmos o data.results, teremos nosso array de objetos com\n      // as informações das pessoas que são geradas aleatoriamente pela requisição.\n      // console.log(data);\n      // console.log(data.results);\n      this.setState({\n        person: data.results,\n        loading: false\n      });\n    });\n  } // o shoudComponentUptade irá verificar se a pessoa renderizada pela API tem mais de 50 anos\n  // e com isso, irá autorizar se o componente atualiza ou não. Caso não atualize,\n  // uma mensagem de \"carregando...\" será exibida na tela. Caso ocorra essa situação, dê\n  // um console.log no nextState e verifique a idade da pessoa que é trazida pela API.\n\n\n  shouldComponentUpdate(_nextProps, nextState) {\n    console.log(nextState);\n    const AGE = 50;\n\n    if (nextState.person[0].dob.age > AGE) {\n      return false;\n    }\n\n    return true;\n  } // Considerando que a API retorna um array de objetos,\n  // a função abaixo foi criada para extrair extrair os dados que precisamos e atribuir\n  // esses dado a suas respectivas keys.\n\n\n  getUserElements(user) {\n    return {\n      name: `${user.name.first} ${user.name.last}`,\n      email: user.email,\n      age: user.dob.age,\n      image: user.picture.thumbnail\n    };\n  }\n\n  render() {\n    const {\n      person,\n      loading\n    } = this.state; // Condição criada para verificar se o estado de loading for true, irá trazer\n    // o componente de loading com a mensagem de \"carregando...\"\n\n    if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }, this);\n    return (\n      /*#__PURE__*/\n      // Para renderizar as informações que precisamos, foi feito um map que trás o componente de\n      // PersonCard, que contém as informações com nome, email, idade e a foto.\n      // Passamos como props a função de getUserElements que retonar um objeto com as informações da pessoa\n      // e como parametro da função, passamos o currentePerson.\n      _jsxDEV(\"div\", {\n        children: person.map((currentPerson, index) => /*#__PURE__*/_jsxDEV(PersonCard, {\n          person: this.getUserElements(currentPerson)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default PersonDetails;","map":{"version":3,"sources":["/home/erivam/Documentos/Trybe/trybe-exercicios/front-end/bloco-12-ciclo-de-vida-de-componentes-e-react-router/dia-1-ciclo-de-vida-de-componentes/exercise-fix-2/src/components/PersonDetails.jsx"],"names":["React","Component","Loading","PersonCard","PersonDetails","constructor","state","loading","person","componentDidMount","url","fetch","then","response","json","data","setState","results","shouldComponentUpdate","_nextProps","nextState","console","log","AGE","dob","age","getUserElements","user","name","first","last","email","image","picture","thumbnail","render","map","currentPerson","index"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AACpCI,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAb;AAID,GAZmC,CAcpC;AACA;AACA;AACA;;;AAEAC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,GAAG,GAAG,4BAAZ;AACAC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd;AACA;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AACZR,QAAAA,MAAM,EAAEO,IAAI,CAACE,OADD;AAEZV,QAAAA,OAAO,EAAE;AAFG,OAAd;AAID,KAXH;AAYD,GAjCmC,CAmCpC;AACA;AACA;AACA;;;AACAW,EAAAA,qBAAqB,CAACC,UAAD,EAAaC,SAAb,EAAwB;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,UAAMG,GAAG,GAAG,EAAZ;;AACA,QAAIH,SAAS,CAACZ,MAAV,CAAiB,CAAjB,EAAoBgB,GAApB,CAAwBC,GAAxB,GAA8BF,GAAlC,EAAuC;AACrC,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GA9CmC,CAgDpC;AACA;AACA;;;AACAG,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB,WAAO;AACLC,MAAAA,IAAI,EAAG,GAAED,IAAI,CAACC,IAAL,CAAUC,KAAM,IAAGF,IAAI,CAACC,IAAL,CAAUE,IAAK,EADtC;AAELC,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFP;AAGLN,MAAAA,GAAG,EAAEE,IAAI,CAACH,GAAL,CAASC,GAHT;AAILO,MAAAA,KAAK,EAAEL,IAAI,CAACM,OAAL,CAAaC;AAJf,KAAP;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE3B,MAAAA,MAAF;AAAUD,MAAAA;AAAV,QAAsB,KAAKD,KAAjC,CADO,CAEP;AACA;;AACA,QAAIC,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACb;AAAA;AACE;AACA;AACA;AACA;AACA;AAAA,kBACGC,MAAM,CAAC4B,GAAP,CAAW,CAACC,aAAD,EAAgBC,KAAhB,kBACV,QAAC,UAAD;AAA0B,UAAA,MAAM,EAAG,KAAKZ,eAAL,CAAqBW,aAArB;AAAnC,WAAkBC,KAAlB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AALF;AAUD;;AA3EmC;;AA8EtC,eAAelC,aAAf","sourcesContent":["// PersonDetails.js\nimport React, { Component } from 'react';\nimport Loading from './Loading';\nimport PersonCard from './PersonCard';\n\nclass PersonDetails extends Component {\n  constructor() {\n    super();\n\n    // No construtor, criamos os nossos estados de Loding e Person, que vai receber a requisição para a api.\n    // Começamos com o Loading como true, pois queremos que ele exiba a nossa mensagem de \"carregando\" enquanto\n    // não renderizamos a primeira tela. Já o Person, setamos como um estado vázio, pois ele ira receber a nossa API.\n\n    this.state = {\n      loading: true,\n      person: [],\n    };\n  }\n\n  // Como estudamos, o componentDidMount vai disparar ações após o componenete ser inserido no DOM, por isso dizemos que é\n  // o ideal para realizar requisições e atribuimos ao nosso estado Person o 'data.results' \n  // que trás os nossos dados da API. Além disso, atribuimos como false o Loading, \n  // uma vez que quando a página é renderizada, não teremos mais a mensagem de \"carregando\".\n\n  componentDidMount() {\n    const url = 'https://api.randomuser.me/';\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        // Note que, nesse ponto o nosso data retorna um Objeto e, se acessarmos o data.results, teremos nosso array de objetos com\n        // as informações das pessoas que são geradas aleatoriamente pela requisição.\n        // console.log(data);\n        // console.log(data.results);\n        this.setState({\n          person: data.results,\n          loading: false,\n        });\n      });\n  }\n\n  // o shoudComponentUptade irá verificar se a pessoa renderizada pela API tem mais de 50 anos\n  // e com isso, irá autorizar se o componente atualiza ou não. Caso não atualize,\n  // uma mensagem de \"carregando...\" será exibida na tela. Caso ocorra essa situação, dê\n  // um console.log no nextState e verifique a idade da pessoa que é trazida pela API.\n  shouldComponentUpdate(_nextProps, nextState) {\n    console.log(nextState);\n    const AGE = 50;\n    if (nextState.person[0].dob.age > AGE) {\n      return false;\n    }\n    return true;\n  }\n\n  // Considerando que a API retorna um array de objetos,\n  // a função abaixo foi criada para extrair extrair os dados que precisamos e atribuir\n  // esses dado a suas respectivas keys.\n  getUserElements(user) {\n    return {\n      name: `${user.name.first} ${user.name.last}`,\n      email: user.email,\n      age: user.dob.age,\n      image: user.picture.thumbnail,\n    };\n  }\n\n  render() {\n    const { person, loading } = this.state;\n    // Condição criada para verificar se o estado de loading for true, irá trazer\n    // o componente de loading com a mensagem de \"carregando...\"\n    if (loading) return <Loading />;\n    return (\n      // Para renderizar as informações que precisamos, foi feito um map que trás o componente de\n      // PersonCard, que contém as informações com nome, email, idade e a foto.\n      // Passamos como props a função de getUserElements que retonar um objeto com as informações da pessoa\n      // e como parametro da função, passamos o currentePerson.\n      <div>\n        {person.map((currentPerson, index) => (\n          <PersonCard key={ index } person={ this.getUserElements(currentPerson) } />))}\n      </div>\n    );\n  }\n}\n\nexport default PersonDetails;"]},"metadata":{},"sourceType":"module"}